{"version":3,"sources":["components/fuse-search-engine.js","App.js","reportWebVitals.js","index.js"],"names":["segmenter","TinySegmenter","tokenize","text","tokenizer","trigram","segment","_tokenize","moji","convert","toString","trim","map","word","toLowerCase","filter","v","cleanQuery","searchType","result","join","isSentenceField","key","includes","extractHighlightText","highlightText","indices","index","slice","value","_addHighlight","orgText","hText","replace","addHighlight","highlight","highlightTexts","targetKey","i","length","split","forEach","ht","dangerouslySetInnerHTML","__html","FuseSearchEngine","props","fileInput","createRef","useState","searchKeys","setSearchKeys","documents","setDocuments","options","setOptions","handleReadFile","fileObj","arrayBuffer","then","buffer","workbook","XLSX","read","type","bookVBA","firstSheetName","SheetNames","worksheet","Sheets","data","utils","sheet_to_json","orgKeys","Object","keys","docs","doc","_doc","push","_searchKeys","Fuse","setIndex","query","setQuery","results","setResults","useEffect","includeScore","includeMatches","useExtendedSearch","threshold","search","console","log","style","padding","Button","variant","color","onClick","current","click","display","accept","ref","onChange","e","preventDefault","currentTarget","files","Paper","component","sx","p","alignItems","width","Divider","height","m","orientation","InputBase","ml","flex","placeholder","inputProps","target","IconButton","List","ListItem","ListItemText","primary","item","matches","secondary","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63ccd708.chunk.js","sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\nimport Fuse from 'fuse.js';\nimport TinySegmenter from \"tiny-segmenter\";\nimport { trigram } from 'n-gram';\nimport moji from \"moji\";\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button'\nimport './highlight.css';\nimport { ListItemText, List, ListItem } from \"@material-ui/core\";\nimport XLSX from 'xlsx';\n\nconst segmenter = new TinySegmenter();\n\nfunction _tokenize(text, tokenizer) {\n    if (tokenizer === \"trigram\") {\n        return trigram(text)\n    } else {\n        return segmenter.segment(text)\n    }\n}\n\nfunction tokenize(text, tokenizer) {\n    const query = moji(text).convert(\"HK\", \"ZK\").convert(\"ZS\", \"HS\").convert(\"ZE\", \"HE\").toString().trim()\n    return _tokenize(query, tokenizer).map((word) => {\n        if (word !== \" \") {\n            return moji(word).convert(\"HG\", \"KK\").toString().toLowerCase();\n        }\n    }).filter(v => v)\n}\n\nfunction encode(text) {\n    return moji(text).convert(\"HK\", \"ZK\").convert(\"ZS\", \"HS\").convert(\"ZE\", \"HE\").convert(\"HG\", \"KK\").toString().trim().toLowerCase();\n}\n\nfunction cleanQuery(text, searchType, tokenizer) {\n    if (searchType === \"plain\") {\n        return moji(text).convert(\"ZS\", \"HS\").toString();\n    }\n    const result = tokenize(text, tokenizer).map((word) => {\n        return `'${word}`\n    })\n    if (searchType === \"or\") {\n        return result.join(\" | \")\n    } else {\n        return result.join(\" \")\n    }\n}\n\nfunction isSentenceField(key) {\n    if (key.includes(\"tokenized\")) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nfunction extractHighlightText(text, highlightText, key) {\n    if (isSentenceField(key)) {\n        const indices = highlightText.indices;\n        return indices.map((index) => {\n            return text.slice(index[0], index[1] + 1)\n        })\n    } else {\n        return highlightText.value;\n    }\n}\n\nfunction _addHighlight(orgText, hText) {\n    return orgText.replace(hText, `<span class=\"highlight\">${hText}</span>`);\n}\n\nfunction addHighlight(orgText, hText) {\n    var text = orgText\n    if (orgText.includes(hText)) {\n        text = _addHighlight(text, hText)\n    } else {\n        text = _addHighlight(text, moji(hText).convert(\"KK\", \"HG\").toString())\n    }\n    return text;\n}\n\nfunction highlight(orgText, highlightTexts, targetKey, searchType) {\n    var text = orgText[targetKey]\n    for (let i = 0; i < highlightTexts.length; i++) {\n        const highlightText = highlightTexts[i]\n        const key = highlightText.key\n\n        var hitKey\n        if (key.includes(\"_\")) {\n            hitKey = key.split(\"_\")[1]\n        } else {\n            hitKey = key\n        }\n        if (hitKey !== targetKey) {\n            break;\n        }\n\n        const hText = extractHighlightText(text, highlightText, key)\n        if (isSentenceField(key)) {\n            if (searchType === \"or\") {\n                continue;\n            }\n            hText.forEach((ht) => {\n                text = addHighlight(text, ht);\n            })\n            break; // escape duplicate highlighting\n        } else {\n            text = addHighlight(text, hText);\n        }\n    }\n    // activate span tag\n    return <div dangerouslySetInnerHTML={{ __html: text }}></div>\n}\n\n\nfunction FuseSearchEngine(props) {\n    const fileInput = createRef();\n    const [searchKeys, setSearchKeys] = useState([])\n    const [documents, setDocuments] = useState([])\n    const [options, setOptions] = useState()\n\n    const tokenizer = props.tokenizer\n    const searchType = props.searchType\n\n    const handleTriggerReadFile = () => {\n        if (fileInput.current) {\n            fileInput.current.click()\n        }\n    }\n\n    const handleReadFile = (fileObj) => {\n        if (fileObj) {\n            fileObj.arrayBuffer().then((buffer) => {\n                const workbook = XLSX.read(buffer, { type: 'buffer', bookVBA: true })\n                const firstSheetName = workbook.SheetNames[0]\n                const worksheet = workbook.Sheets[firstSheetName]\n                const data = XLSX.utils.sheet_to_json(worksheet)\n                const orgKeys = Object.keys(data[0])\n                var docs = [];\n                data.forEach((doc) => {\n                    var _doc = {};\n                    Object.keys(doc).forEach((key) => {\n                        _doc[key] = doc[key]\n                        _doc[`search_${key}`] = encode(doc[key])\n                        _doc[`tokenized_${key}`] = tokenize(doc[key], tokenizer)\n                    })\n                    docs.push(_doc)\n                })\n\n                var _searchKeys = orgKeys\n                orgKeys.forEach((key) => {\n                    _searchKeys.push(`search_${key}`)\n                    _searchKeys.push(`tokenized_${key}`)\n                })\n                setSearchKeys(_searchKeys)\n                setDocuments(docs)\n            })\n        }\n    }\n\n    // This will create a new search index. Here we are using all of the default options, but the docs show other choices that can be used. \n\n    const [index, setIndex] = useState(new Fuse(documents, options));\n\n    //  Create state variables for query and results.\n\n    const [query, setQuery] = useState(\"\");\n    const [results, setResults] = useState([]);\n\n    //  When the component first loads, we need to iterate through data values and add each to the search index. \n\n    useEffect(() => {\n        const options = {\n            includeScore: true,\n            includeMatches: true,\n            useExtendedSearch: true,\n            threshold: 0.3,\n            keys: searchKeys,\n        };\n        setOptions(options)\n    }, [searchKeys]);\n\n    useEffect(() => {\n        setIndex(new Fuse(documents, options))\n    }, [documents]);\n\n    //  When the query from the search input changes, we want to update the query state and thus the results to display. \n\n    useEffect(() => {\n        setResults(index.search(cleanQuery(query, searchType, tokenizer)));\n    }, [query]);\n\n    console.log(\"index:\", index)\n    console.log(\"query:\", cleanQuery(query, searchType, tokenizer));\n    console.log(\"search org:\", index.search(query));\n    console.log(\"search: cleaned\", index.search(cleanQuery(query, searchType, tokenizer)));\n\n    return (\n        <div>\n            <h2>searchType: {searchType}, tokenizer: {tokenizer}</h2>\n            <div style={{ padding: \"20px\" }}>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handleTriggerReadFile()}>upload data</Button>\n                <form style={{ display: \"none\" }}>\n                    <input\n                        type=\"file\"\n                        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                        ref={fileInput}\n                        onChange={(e) => {\n                            e.preventDefault()\n                            handleReadFile(e.currentTarget.files[0])\n                        }}\n                    />\n                </form>\n            </div>\n            <Paper\n                component=\"form\"\n                sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: 400 }}\n            >\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                <InputBase\n                    sx={{ ml: 1, flex: 1 }}\n                    placeholder=\"Input Search Text\"\n                    inputProps={{ 'aria-label': 'input search text' }}\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                />\n                <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\">\n                    <SearchIcon />\n                </IconButton>\n                <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n            </Paper>\n            <List>\n                {results.map((result) => (\n                    <ListItem>\n                        <ListItemText key={result.item[searchKeys[0]]} primary={highlight(result.item, result.matches, searchKeys[0], searchType)} secondary={highlight(result.item, result.matches, searchKeys[1], searchType)} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n};\n\nexport default FuseSearchEngine;\n","import './App.css';\nimport FuseSearchEngine from './components/fuse-search-engine';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FuseSearchEngine searchType=\"and\" />\n      <FuseSearchEngine searchType=\"or\" />\n      <FuseSearchEngine searchType=\"plain\" />\n      <FuseSearchEngine searchType=\"or\" tokenizer=\"trigram\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}